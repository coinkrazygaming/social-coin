import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Badge } from '../components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { RadioGroup, RadioGroupItem } from '../components/ui/radio-group';
import { useAuth } from '../components/AuthContext';
import { AccessDeniedModal } from '../components/AccessDeniedModal';
import { SportEvent, Bet, BetSlip, BetSlipItem } from '@shared/sportsbookTypes';
import { Clock, DollarSign, TrendingUp, Users, Zap, MessageCircle, Star, Trophy, Target, Globe } from 'lucide-react';

interface Sport {
  id: string;
  name: string;
  icon: string;
  activeGames: number;
}

interface PopularBet {
  selection: string;
  percentage: number;
  odds: number;
}

export function Sportsbook() {
  const { user } = useAuth();
  const [showAccessDenied, setShowAccessDenied] = useState(false);
  const [sports, setSports] = useState<Sport[]>([]);
  const [events, setEvents] = useState<SportEvent[]>([]);
  const [selectedSport, setSelectedSport] = useState<string>('all');
  const [betSlip, setBetSlip] = useState<BetSlip>({
    bets: [],
    totalStake: 0,
    totalPotentialWin: 0,
    currency: 'GC',
    betType: 'single'
  });
  const [popularBets, setPopularBets] = useState<PopularBet[]>([]);
  const [showBetSlip, setShowBetSlip] = useState(false);
  const [liveEvents, setLiveEvents] = useState<SportEvent[]>([]);
  const [showLuckyAIChat, setShowLuckyAIChat] = useState(false);
  const [luckyAIMessages, setLuckyAIMessages] = useState<Array<{role: 'user' | 'ai', message: string, timestamp: Date}>>([
    {
      role: 'ai',
      message: 'Welcome to CoinKrazy Sportsbook! I\'m LuckyAI, your Sportsbook Manager. I can help you understand odds, find value bets, and manage your wagering strategy. What can I help you with today?',
      timestamp: new Date()
    }
  ]);
  const [aiInput, setAiInput] = useState('');

  // Fun facts generated by LuckyAI for teams
  const teamFunFacts: Record<string, string> = {
    'lakers': 'The Lakers have won 17 NBA championships and their purple and gold colors were inspired by the University of Minnesota.',
    'warriors': 'Golden State Warriors have the best home court advantage with their "Roaracle" crowd atmosphere.',
    'chiefs': 'Kansas City Chiefs fans hold the Guinness World Record for loudest crowd roar at 142.2 decibels!',
    'bills': 'Buffalo Bills fans are famous for their tailgating tradition called "Bills Mafia" and jumping through tables.',
    'heat': 'Miami Heat\'s home court features one of the most challenging shooting backgrounds in the NBA.',
    'celtics': 'Boston Celtics have the most NBA championships with 17 titles and the famous parquet floor.'
  };

  useEffect(() => {
    fetchSports();
    fetchEvents();
    fetchPopularBets();
    
    // Set up real-time updates
    const interval = setInterval(() => {
      fetchLiveEvents();
      updateOdds();
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (selectedSport !== 'all') {
      fetchEventsBySport(selectedSport);
    } else {
      fetchEvents();
    }
  }, [selectedSport]);

  const fetchSports = async () => {
    try {
      const response = await fetch('/api/sportsbook/sports');
      const data = await response.json();
      setSports(data);
    } catch (error) {
      console.error('Error fetching sports:', error);
    }
  };

  const fetchEvents = async () => {
    try {
      const response = await fetch('/api/sportsbook/events');
      const data = await response.json();
      setEvents(data);
    } catch (error) {
      console.error('Error fetching events:', error);
    }
  };

  const fetchEventsBySport = async (sport: string) => {
    try {
      const response = await fetch(`/api/sportsbook/events?sport=${sport}`);
      const data = await response.json();
      setEvents(data);
    } catch (error) {
      console.error('Error fetching events by sport:', error);
    }
  };

  const fetchLiveEvents = async () => {
    try {
      const response = await fetch('/api/sportsbook/events?live=true');
      const data = await response.json();
      setLiveEvents(data);
    } catch (error) {
      console.error('Error fetching live events:', error);
    }
  };

  const fetchPopularBets = async () => {
    try {
      const response = await fetch('/api/sportsbook/popular-bets');
      const data = await response.json();
      setPopularBets(data);
    } catch (error) {
      console.error('Error fetching popular bets:', error);
    }
  };

  const updateOdds = async () => {
    // Update odds for live events
    for (const event of liveEvents) {
      try {
        const response = await fetch(`/api/sportsbook/events/${event.id}/odds`);
        const newOdds = await response.json();
        
        setEvents(prevEvents => 
          prevEvents.map(e => 
            e.id === event.id ? { ...e, odds: newOdds } : e
          )
        );
      } catch (error) {
        console.error('Error updating odds:', error);
      }
    }
  };

  const addToBetSlip = (event: SportEvent, betType: string, selection: string, odds: number, line?: number) => {
    if (!user) {
      setShowAccessDenied(true);
      return;
    }

    const betSlipItem: BetSlipItem = {
      eventId: event.id,
      event,
      betType: betType as any,
      selection,
      odds,
      line,
      stake: 5 // Default stake
    };

    setBetSlip(prev => ({
      ...prev,
      bets: [...prev.bets, betSlipItem]
    }));
    setShowBetSlip(true);
  };

  const updateBetStake = (index: number, stake: number) => {
    setBetSlip(prev => {
      const newBets = [...prev.bets];
      newBets[index].stake = stake;
      
      const totalStake = newBets.reduce((sum, bet) => sum + bet.stake, 0);
      const totalPotentialWin = newBets.reduce((sum, bet) => {
        const win = bet.odds > 0 ? 
          bet.stake * (bet.odds / 100) : 
          bet.stake * (100 / Math.abs(bet.odds));
        return sum + bet.stake + win;
      }, 0);

      return {
        ...prev,
        bets: newBets,
        totalStake,
        totalPotentialWin
      };
    });
  };

  const removeBetFromSlip = (index: number) => {
    setBetSlip(prev => ({
      ...prev,
      bets: prev.bets.filter((_, i) => i !== index)
    }));
  };

  const placeBets = async () => {
    if (!user) return;

    try {
      for (const bet of betSlip.bets) {
        const response = await fetch('/api/sportsbook/bets', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: user.id,
            username: user.username,
            eventId: bet.eventId,
            betType: bet.betType,
            selection: bet.selection,
            odds: bet.odds,
            stake: bet.stake,
            currency: betSlip.currency
          })
        });

        if (!response.ok) {
          throw new Error('Failed to place bet');
        }
      }

      setBetSlip({
        bets: [],
        totalStake: 0,
        totalPotentialWin: 0,
        currency: betSlip.currency,
        betType: 'single'
      });
      setShowBetSlip(false);
      alert('Bets placed successfully!');
    } catch (error) {
      console.error('Error placing bets:', error);
      alert('Failed to place bets. Please try again.');
    }
  };

  const sendLuckyAIMessage = () => {
    if (!aiInput.trim()) return;

    const userMessage = { role: 'user' as const, message: aiInput, timestamp: new Date() };
    setLuckyAIMessages(prev => [...prev, userMessage]);

    // Simulate AI response
    setTimeout(() => {
      const responses = [
        "Based on current odds, the Lakers have 68% public backing. Consider the value in the Warriors spread.",
        "Weather conditions in Kansas City show clear skies - perfect for an over bet on total points.",
        "The NBA total has hit the over in 72% of games this week. Historical trends favor the over.",
        "That's a smart bet! The home team has covered the spread in 8 of their last 10 games.",
        "I'd recommend keeping your stake at 2-3% of your bankroll for sustainable betting.",
        "Live betting opportunities often arise in the 3rd quarter when momentum shifts."
      ];
      
      const aiMessage = {
        role: 'ai' as const,
        message: responses[Math.floor(Math.random() * responses.length)],
        timestamp: new Date()
      };
      
      setLuckyAIMessages(prev => [...prev, aiMessage]);
    }, 1000);

    setAiInput('');
  };

  const formatOdds = (odds: number) => {
    return odds > 0 ? `+${odds}` : `${odds}`;
  };

  const formatDate = (date: Date) => {
    return new Date(date).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: '2-digit'
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-purple-800">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold text-white mb-2">
              CoinKrazy Sportsbook üèÜ
            </h1>
            <p className="text-purple-200">Live Sports Betting with Gold Coins & Sweeps Coins</p>
          </div>
          <div className="flex gap-4">
            <Button
              onClick={() => setShowLuckyAIChat(!showLuckyAIChat)}
              className="bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600"
            >
              <MessageCircle className="w-4 h-4 mr-2" />
              LuckyAI Manager
            </Button>
            {betSlip.bets.length > 0 && (
              <Button
                onClick={() => setShowBetSlip(!showBetSlip)}
                className="bg-green-600 hover:bg-green-700 relative"
              >
                <Badge className="absolute -top-2 -right-2 bg-red-500">
                  {betSlip.bets.length}
                </Badge>
                Bet Slip
              </Button>
            )}
          </div>
        </div>

        {/* Sports Navigation */}
        <div className="flex gap-2 mb-6 overflow-x-auto">
          <Button
            variant={selectedSport === 'all' ? 'default' : 'outline'}
            onClick={() => setSelectedSport('all')}
            className="whitespace-nowrap"
          >
            All Sports
          </Button>
          {sports.map((sport) => (
            <Button
              key={sport.id}
              variant={selectedSport === sport.id ? 'default' : 'outline'}
              onClick={() => setSelectedSport(sport.id)}
              className="whitespace-nowrap"
            >
              {sport.icon} {sport.name}
              {sport.activeGames > 0 && (
                <Badge className="ml-2 bg-red-500">{sport.activeGames}</Badge>
              )}
            </Button>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-3">
            <Tabs defaultValue="upcoming">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="upcoming">Upcoming Games</TabsTrigger>
                <TabsTrigger value="live">Live Games</TabsTrigger>
                <TabsTrigger value="popular">Popular Bets</TabsTrigger>
              </TabsList>

              <TabsContent value="upcoming" className="space-y-4">
                {events.filter(e => e.status === 'upcoming').map((event) => (
                  <Card key={event.id} className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <div className="flex justify-between items-center">
                        <CardTitle className="text-white flex items-center gap-2">
                          <Badge variant="outline">{event.sport}</Badge>
                          {event.league}
                        </CardTitle>
                        <div className="text-gray-400 text-sm">
                          <Clock className="w-4 h-4 inline mr-1" />
                          {formatDate(event.startTime)}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {/* Team Matchup */}
                        <div className="space-y-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <img 
                                src={event.awayTeam.logo} 
                                alt={event.awayTeam.name}
                                className="w-8 h-8"
                              />
                              <div>
                                <div className="text-white font-medium">
                                  {event.awayTeam.name}
                                </div>
                                <div className="text-sm text-gray-400">
                                  {event.awayTeam.record?.wins}-{event.awayTeam.record?.losses}
                                  {event.awayTeam.ranking && ` (#${event.awayTeam.ranking})`}
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="text-center text-gray-400">@</div>
                          
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <img 
                                src={event.homeTeam.logo} 
                                alt={event.homeTeam.name}
                                className="w-8 h-8"
                              />
                              <div>
                                <div className="text-white font-medium">
                                  {event.homeTeam.name}
                                </div>
                                <div className="text-sm text-gray-400">
                                  {event.homeTeam.record?.wins}-{event.homeTeam.record?.losses}
                                  {event.homeTeam.ranking && ` (#${event.homeTeam.ranking})`}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Fun Facts */}
                          <div className="mt-4">
                            <div className="text-xs text-yellow-400 font-medium mb-1">
                              <Star className="w-3 h-3 inline mr-1" />
                              LuckyAI Fun Fact
                            </div>
                            <div className="text-xs text-gray-300">
                              {teamFunFacts[event.homeTeam.id] || teamFunFacts[event.awayTeam.id] || 
                               'This matchup features two competitive teams with rich sporting histories.'}
                            </div>
                          </div>
                        </div>

                        {/* Moneyline */}
                        <div>
                          <h4 className="text-white font-medium mb-2">Moneyline</h4>
                          <div className="space-y-2">
                            <Button
                              variant="outline"
                              className="w-full justify-between"
                              onClick={() => addToBetSlip(event, 'moneyline', `${event.awayTeam.shortName} ML`, event.odds.moneyline.away)}
                            >
                              <span>{event.awayTeam.shortName}</span>
                              <span>{formatOdds(event.odds.moneyline.away)}</span>
                            </Button>
                            <Button
                              variant="outline"
                              className="w-full justify-between"
                              onClick={() => addToBetSlip(event, 'moneyline', `${event.homeTeam.shortName} ML`, event.odds.moneyline.home)}
                            >
                              <span>{event.homeTeam.shortName}</span>
                              <span>{formatOdds(event.odds.moneyline.home)}</span>
                            </Button>
                          </div>
                        </div>

                        {/* Spread & Total */}
                        <div>
                          <h4 className="text-white font-medium mb-2">Spread & Total</h4>
                          <div className="space-y-2">
                            <Button
                              variant="outline"
                              className="w-full justify-between text-sm"
                              onClick={() => addToBetSlip(event, 'spread', `${event.homeTeam.shortName} ${event.odds.spread.home.line > 0 ? '+' : ''}${event.odds.spread.home.line.toFixed(1)}`, event.odds.spread.home.odds)}
                            >
                              <span>{event.homeTeam.shortName} {event.odds.spread.home.line > 0 ? '+' : ''}{event.odds.spread.home.line.toFixed(1)}</span>
                              <span>{formatOdds(event.odds.spread.home.odds)}</span>
                            </Button>
                            <Button
                              variant="outline"
                              className="w-full justify-between text-sm"
                              onClick={() => addToBetSlip(event, 'total', `Over ${event.odds.total.over.line}`, event.odds.total.over.odds)}
                            >
                              <span>Over {event.odds.total.over.line}</span>
                              <span>{formatOdds(event.odds.total.over.odds)}</span>
                            </Button>
                          </div>
                        </div>
                      </div>

                      {event.venue && (
                        <div className="mt-4 text-sm text-gray-400">
                          üìç {event.venue}
                          {event.weather && (
                            <span className="ml-4">
                              üå§Ô∏è {event.weather.temperature}¬∞F, {event.weather.conditions}
                            </span>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>

              <TabsContent value="live" className="space-y-4">
                {liveEvents.map((event) => (
                  <Card key={event.id} className="bg-gray-800 border-gray-700 border-red-500">
                    <CardHeader>
                      <div className="flex justify-between items-center">
                        <CardTitle className="text-white flex items-center gap-2">
                          <Badge className="bg-red-600 animate-pulse">LIVE</Badge>
                          {event.league}
                        </CardTitle>
                        <div className="text-red-400 text-sm font-medium">
                          {event.quarter} - {event.timeRemaining}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between items-center mb-4">
                        <div className="flex items-center gap-3">
                          <img src={event.awayTeam.logo} alt={event.awayTeam.name} className="w-8 h-8" />
                          <span className="text-white font-medium">{event.awayTeam.shortName}</span>
                          <span className="text-2xl font-bold text-white">{event.awayScore}</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <span className="text-2xl font-bold text-white">{event.homeScore}</span>
                          <span className="text-white font-medium">{event.homeTeam.shortName}</span>
                          <img src={event.homeTeam.logo} alt={event.homeTeam.name} className="w-8 h-8" />
                        </div>
                      </div>

                      <div className="grid grid-cols-3 gap-4">
                        <Button
                          variant="outline"
                          className="text-sm"
                          onClick={() => addToBetSlip(event, 'moneyline', `${event.awayTeam.shortName} ML`, event.odds.moneyline.away)}
                        >
                          {event.awayTeam.shortName} {formatOdds(event.odds.moneyline.away)}
                        </Button>
                        <Button
                          variant="outline"
                          className="text-sm"
                          onClick={() => addToBetSlip(event, 'total', `Over ${event.odds.total.over.line}`, event.odds.total.over.odds)}
                        >
                          O {event.odds.total.over.line} {formatOdds(event.odds.total.over.odds)}
                        </Button>
                        <Button
                          variant="outline"
                          className="text-sm"
                          onClick={() => addToBetSlip(event, 'moneyline', `${event.homeTeam.shortName} ML`, event.odds.moneyline.home)}
                        >
                          {event.homeTeam.shortName} {formatOdds(event.odds.moneyline.home)}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>

              <TabsContent value="popular" className="space-y-4">
                <Card className="bg-gray-800 border-gray-700">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center gap-2">
                      <TrendingUp className="w-5 h-5" />
                      Most Popular Bets
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {popularBets.map((bet, index) => (
                        <div key={index} className="flex justify-between items-center p-3 bg-gray-700 rounded">
                          <div>
                            <div className="text-white font-medium">{bet.selection}</div>
                            <div className="text-sm text-gray-400">
                              <Users className="w-4 h-4 inline mr-1" />
                              {bet.percentage}% of bettors
                            </div>
                          </div>
                          <Button variant="outline" size="sm">
                            {formatOdds(bet.odds)}
                          </Button>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Currency Balance */}
            {user && (
              <Card className="bg-gray-800 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white text-sm">Your Balance</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Gold Coins</span>
                    <span className="text-yellow-500 font-medium">{user.goldCoins.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Sweeps Coins</span>
                    <span className="text-green-500 font-medium">{user.sweepsCoins.toFixed(2)}</span>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Live Promotions */}
            <Card className="bg-gradient-to-br from-yellow-600 to-orange-600 border-0">
              <CardContent className="p-4">
                <div className="text-white text-center">
                  <Trophy className="w-8 h-8 mx-auto mb-2" />
                  <h3 className="font-bold mb-1">Bet & Get Bonus!</h3>
                  <p className="text-sm opacity-90">
                    Place 5 bets and get 100 SC bonus
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Quick Stats */}
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white text-sm">Today's Action</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">Live Games</span>
                  <span className="text-red-500 font-medium">{liveEvents.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Total Events</span>
                  <span className="text-blue-500 font-medium">{events.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Sports Available</span>
                  <span className="text-purple-500 font-medium">{sports.length}</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Bet Slip Modal */}
        {showBetSlip && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <Card className="bg-gray-800 border-gray-700 w-full max-w-md mx-4">
              <CardHeader>
                <CardTitle className="text-white flex justify-between items-center">
                  Bet Slip
                  <Button variant="ghost" size="sm" onClick={() => setShowBetSlip(false)}>
                    ‚úï
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Currency Selection */}
                <div>
                  <Label className="text-white">Currency</Label>
                  <RadioGroup
                    value={betSlip.currency}
                    onValueChange={(value) => setBetSlip(prev => ({ ...prev, currency: value as 'GC' | 'SC' }))}
                    className="flex gap-4 mt-2"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="GC" id="gc" />
                      <Label htmlFor="gc" className="text-yellow-400">Gold Coins (Fun Play)</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="SC" id="sc" />
                      <Label htmlFor="sc" className="text-green-400">Sweeps Coins (Real Prizes)</Label>
                    </div>
                  </RadioGroup>
                </div>

                {/* Bet List */}
                <div className="space-y-3 max-h-60 overflow-y-auto">
                  {betSlip.bets.map((bet, index) => (
                    <div key={index} className="p-3 bg-gray-700 rounded space-y-2">
                      <div className="flex justify-between">
                        <span className="text-white text-sm font-medium">{bet.selection}</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeBetFromSlip(index)}
                          className="text-red-400 p-1"
                        >
                          ‚úï
                        </Button>
                      </div>
                      <div className="text-xs text-gray-400">
                        {bet.event.awayTeam.shortName} @ {bet.event.homeTeam.shortName}
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-300">Odds: {formatOdds(bet.odds)}</span>
                        <div className="flex items-center gap-2">
                          <Label className="text-xs text-gray-400">Stake:</Label>
                          <Input
                            type="number"
                            value={bet.stake}
                            onChange={(e) => updateBetStake(index, Number(e.target.value))}
                            className="w-20 h-8 text-xs"
                            min="1"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Totals */}
                <div className="border-t border-gray-600 pt-4 space-y-2">
                  <div className="flex justify-between text-white">
                    <span>Total Stake:</span>
                    <span>{betSlip.totalStake.toFixed(2)} {betSlip.currency}</span>
                  </div>
                  <div className="flex justify-between text-green-400 font-medium">
                    <span>Potential Win:</span>
                    <span>{betSlip.totalPotentialWin.toFixed(2)} {betSlip.currency}</span>
                  </div>
                </div>

                <Button
                  onClick={placeBets}
                  className="w-full bg-green-600 hover:bg-green-700"
                  disabled={betSlip.bets.length === 0}
                >
                  Place Bets
                </Button>
              </CardContent>
            </Card>
          </div>
        )}

        {/* LuckyAI Chat */}
        {showLuckyAIChat && (
          <div className="fixed bottom-4 right-4 w-80 h-96 bg-gray-800 border border-gray-700 rounded-lg z-50">
            <div className="p-3 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-t-lg">
              <div className="flex justify-between items-center text-white">
                <span className="font-medium">üéØ LuckyAI Sportsbook Manager</span>
                <Button variant="ghost" size="sm" onClick={() => setShowLuckyAIChat(false)}>
                  ‚úï
                </Button>
              </div>
            </div>
            <div className="h-64 overflow-y-auto p-3 space-y-2">
              {luckyAIMessages.map((msg, index) => (
                <div
                  key={index}
                  className={`p-2 rounded text-sm ${
                    msg.role === 'ai'
                      ? 'bg-blue-600 text-white ml-4'
                      : 'bg-gray-600 text-white mr-4'
                  }`}
                >
                  {msg.message}
                </div>
              ))}
            </div>
            <div className="p-3 border-t border-gray-700">
              <div className="flex gap-2">
                <Input
                  value={aiInput}
                  onChange={(e) => setAiInput(e.target.value)}
                  placeholder="Ask about odds, teams, or strategy..."
                  className="flex-1"
                  onKeyPress={(e) => e.key === 'Enter' && sendLuckyAIMessage()}
                />
                <Button size="sm" onClick={sendLuckyAIMessage}>
                  Send
                </Button>
              </div>
            </div>
          </div>
        )}

        <AccessDeniedModal
          isOpen={showAccessDenied}
          onClose={() => setShowAccessDenied(false)}
          feature="Sportsbook Betting"
        />
      </div>
    </div>
  );
}
