import { useState, useEffect, useRef } from "react";
import { Button } from "./ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { Badge } from "./ui/badge";
import { Input } from "./ui/input";
import { ScrollArea } from "./ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
import { Textarea } from "./ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "./ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { Switch } from "./ui/switch";
import { Progress } from "./ui/progress";
import {
  Bot,
  Send,
  Lightbulb,
  Code,
  Zap,
  MessageCircle,
  Sparkles,
  Brain,
  Settings,
  FileCode,
  Palette,
  Play,
  CheckSquare,
  ListTodo,
  History,
  RotateCcw,
  Save,
  Trash2,
  Download,
  Upload,
  Wand2,
  Cpu,
  Database,
  GitBranch,
  Clock,
  ChevronDown,
  ChevronUp,
  Eye,
  EyeOff,
  Volume2,
  VolumeX,
  PaintBucket,
  Component,
} from "lucide-react";

interface EnhancedJoseyAIProps {
  context: "slot-editor" | "general" | "debugging" | "admin" | "development";
  currentProject?: any;
  onSuggestionApply?: (suggestion: string) => void;
  onCodeGenerate?: (code: string, type: string) => void;
  onComponentGenerate?: (component: any) => void;
  onTodoCreate?: (todo: any) => void;
  onRestorePoint?: (point: any) => void;
}

interface ChatMessage {
  id: string;
  type: "user" | "ai" | "system";
  message: string;
  timestamp: Date;
  suggestions?: string[];
  codeExample?: string;
  nextSteps?: string[];
  component?: any;
  metadata?: any;
  priority?: "low" | "medium" | "high";
  tags?: string[];
}

interface TodoItem {
  id: string;
  title: string;
  description: string;
  status: "pending" | "in_progress" | "completed" | "blocked";
  priority: "low" | "medium" | "high";
  estimatedTime: number;
  assignedBy: "ai" | "user";
  dependencies: string[];
  tags: string[];
  created: Date;
  updated: Date;
  dueDate?: Date;
}

interface RestorePoint {
  id: string;
  name: string;
  description: string;
  timestamp: Date;
  data: any;
  autoGenerated: boolean;
  tags: string[];
}

interface AISettings {
  llmModel: "gpt-4" | "claude-3" | "gemini-pro" | "local";
  temperature: number;
  maxTokens: number;
  contextWindow: number;
  enableCodeGen: boolean;
  enableTodoManagement: boolean;
  enableRestorePoints: boolean;
  autoCreateBackups: boolean;
  verboseMode: boolean;
  realTimeAnalysis: boolean;
  voiceEnabled: boolean;
}

export function EnhancedJoseyAI({
  context,
  currentProject,
  onSuggestionApply,
  onCodeGenerate,
  onComponentGenerate,
  onTodoCreate,
  onRestorePoint,
}: EnhancedJoseyAIProps) {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [todos, setTodos] = useState<TodoItem[]>([]);
  const [restorePoints, setRestorePoints] = useState<RestorePoint[]>([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isExpanded, setIsExpanded] = useState(true);
  const [activeTab, setActiveTab] = useState<
    "chat" | "todos" | "restore" | "settings" | "analytics"
  >("chat");
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingProgress, setProcessingProgress] = useState(0);
  const [currentTask, setCurrentTask] = useState<string>("");
  
  const [aiSettings, setAiSettings] = useState<AISettings>({
    llmModel: "gpt-4",
    temperature: 0.7,
    maxTokens: 4000,
    contextWindow: 8000,
    enableCodeGen: true,
    enableTodoManagement: true,
    enableRestorePoints: true,
    autoCreateBackups: true,
    verboseMode: false,
    realTimeAnalysis: true,
    voiceEnabled: false,
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    initializeAI();
  }, [context]);

  const initializeAI = async () => {
    const welcomeMessage = await getEnhancedWelcomeMessage();
    setMessages([welcomeMessage]);
    
    // Create initial restore point
    if (aiSettings.autoCreateBackups) {
      createRestorePoint("Initial State", "Automatic backup on JoseyAI startup", true);
    }
  };

  const getEnhancedWelcomeMessage = async (): Promise<ChatMessage> => {
    const baseMessage = {
      id: "welcome",
      type: "ai" as const,
      timestamp: new Date(),
      tags: ["welcome", "initialization"],
    };

    const contextMessages = {
      "slot-editor": {
        message: `üé∞ **JoseyAI Enhanced Slot Development Assistant** 

Welcome to the most advanced slot development AI! I'm powered by ${aiSettings.llmModel} and ready to help you create production-ready CoinKrazy slot games.

**üöÄ New Capabilities:**
‚Ä¢ **LLM-Powered Code Generation** - Write complete components instantly
‚Ä¢ **Intelligent Todo Management** - Break down complex tasks automatically  
‚Ä¢ **Restore Points** - Never lose your work with automatic backups
‚Ä¢ **Component Generator** - Create React components with full TypeScript
‚Ä¢ **Real-time Analysis** - Live feedback on your slot math and design
‚Ä¢ **Production Builds** - Deploy-ready code every time

**üéØ Slot Development Features:**
‚Ä¢ Advanced symbol design with ML-optimized graphics
‚Ä¢ RTP modeling with statistical analysis
‚Ä¢ Bonus feature architecture
‚Ä¢ Animation system integration
‚Ä¢ Performance optimization
‚Ä¢ Cross-platform compatibility testing

Ready to build something amazing? What's your vision?`,
        suggestions: [
          "Generate a complete slot machine",
          "Create custom symbols with animations",
          "Build bonus feature logic",
          "Optimize slot mathematics",
          "Generate production components",
          "Set up automated testing",
        ],
        nextSteps: [
          "Describe your slot concept",
          "Choose development approach",
          "Configure project settings",
        ],
      },
      "admin": {
        message: `üõ†Ô∏è **JoseyAI Admin & DevOps Assistant**

Your advanced casino platform management AI is online! I can help with:

**üîß System Management:**
‚Ä¢ Full admin panel development
‚Ä¢ User management with KYC integration
‚Ä¢ Database optimization and monitoring
‚Ä¢ Security audit and implementation
‚Ä¢ Performance analytics and tuning
‚Ä¢ Automated deployment pipelines

**üìä Analytics & Reporting:**
‚Ä¢ Real-time player behavior analysis
‚Ä¢ Revenue optimization algorithms
‚Ä¢ Risk management systems
‚Ä¢ Compliance reporting automation
‚Ä¢ A/B testing frameworks

**üèóÔ∏è Infrastructure:**
‚Ä¢ Microservices architecture
‚Ä¢ Load balancing configuration
‚Ä¢ Database scaling strategies
‚Ä¢ CI/CD pipeline setup

What administrative challenge shall we tackle?`,
        suggestions: [
          "Build complete admin panel",
          "Set up user management system",
          "Create analytics dashboard",
          "Implement security features",
          "Configure deployment pipeline",
          "Optimize database performance",
        ],
      },
      "development": {
        message: `üöÄ **JoseyAI Full-Stack Development Assistant**

Advanced development AI ready for enterprise-level casino platform development!

**‚ö° Development Capabilities:**
‚Ä¢ **Component Architecture** - Scalable React/TypeScript systems
‚Ä¢ **API Development** - RESTful and GraphQL backends
‚Ä¢ **Database Design** - Optimized schemas and migrations  
‚Ä¢ **Testing Automation** - Unit, integration, and E2E tests
‚Ä¢ **Performance Engineering** - Sub-100ms response times
‚Ä¢ **Security Implementation** - Enterprise-grade protection

**üé∞ Casino-Specific Features:**
‚Ä¢ Table games with real-time multiplayer
‚Ä¢ Bingo hall with synchronized gameplay
‚Ä¢ Payment processing integration
‚Ä¢ Regulatory compliance systems
‚Ä¢ Fraud detection algorithms
‚Ä¢ Live dealer integration

**üîÑ AI-Powered Workflow:**
‚Ä¢ Automatic code review and optimization
‚Ä¢ Intelligent debugging and error resolution
‚Ä¢ Performance profiling and recommendations
‚Ä¢ Security vulnerability scanning

What system shall we architect together?`,
        suggestions: [
          "Design table games system",
          "Build bingo hall platform",
          "Create payment processing",
          "Implement real-time features",
          "Set up security systems",
          "Generate test suites",
        ],
      },
    };

    const contextMessage = contextMessages[context] || {
      message: `ü§ñ **JoseyAI Enhanced Assistant**

I'm your advanced AI development partner, equipped with cutting-edge capabilities for casino platform development.

**üéØ Core Features:**
‚Ä¢ Advanced LLM reasoning and code generation
‚Ä¢ Intelligent project management with todo automation
‚Ä¢ Automatic backup and restore functionality
‚Ä¢ Component generation with best practices
‚Ä¢ Real-time performance monitoring
‚Ä¢ Production-ready code output

How can I accelerate your development today?`,
      suggestions: [
        "Start new project",
        "Generate components",
        "Optimize existing code",
        "Create documentation",
        "Set up testing",
        "Review architecture",
      ],
    };

    return {
      ...baseMessage,
      ...contextMessage,
      metadata: {
        model: aiSettings.llmModel,
        temperature: aiSettings.temperature,
        context,
        features: ["llm", "todos", "restore", "codegen"],
      },
    };
  };

  const generateEnhancedAIResponse = async (
    userMessage: string,
  ): Promise<ChatMessage> => {
    setIsProcessing(true);
    setProcessingProgress(0);
    setCurrentTask("Analyzing request...");

    // Simulate advanced AI processing with progress updates
    const steps = [
      { message: "Analyzing request...", progress: 20 },
      { message: "Consulting knowledge base...", progress: 40 },
      { message: "Generating response...", progress: 60 },
      { message: "Optimizing suggestions...", progress: 80 },
      { message: "Finalizing output...", progress: 100 },
    ];

    for (const step of steps) {
      setCurrentTask(step.message);
      setProcessingProgress(step.progress);
      await new Promise((resolve) => setTimeout(resolve, 300));
    }

    const lowerMessage = userMessage.toLowerCase();
    let response: ChatMessage;

    // Enhanced AI response logic with LLM-style reasoning
    if (lowerMessage.includes("generate") || lowerMessage.includes("create")) {
      response = await handleGenerationRequest(userMessage);
    } else if (lowerMessage.includes("todo") || lowerMessage.includes("task")) {
      response = await handleTodoRequest(userMessage);
    } else if (lowerMessage.includes("restore") || lowerMessage.includes("backup")) {
      response = await handleRestoreRequest(userMessage);
    } else if (lowerMessage.includes("component")) {
      response = await handleComponentRequest(userMessage);
    } else if (lowerMessage.includes("optimize") || lowerMessage.includes("improve")) {
      response = await handleOptimizationRequest(userMessage);
    } else {
      response = await handleGeneralRequest(userMessage);
    }

    setIsProcessing(false);
    setProcessingProgress(0);
    setCurrentTask("");

    // Auto-create restore point for significant changes
    if (response.codeExample || response.component) {
      createRestorePoint(
        `AI Generated: ${userMessage.slice(0, 30)}...`,
        `Response to: ${userMessage}`,
        true
      );
    }

    return response;
  };

  const handleGenerationRequest = async (userMessage: string): Promise<ChatMessage> => {
    const timestamp = new Date();
    
    if (userMessage.toLowerCase().includes("slot")) {
      return {
        id: timestamp.getTime().toString(),
        type: "ai",
        message: `üé∞ **Generating Complete Slot Machine System**

I'm creating a production-ready slot machine with all components. This includes:

**üèóÔ∏è Generated Components:**
‚Ä¢ SlotMachine main component with TypeScript
‚Ä¢ Reel and Symbol components with animations
‚Ä¢ PaylineCalculator with mathematical precision
‚Ä¢ SoundManager with Web Audio API
‚Ä¢ StateManager with Redux integration
‚Ä¢ Testing suite with Jest/Testing Library

**üé® Visual Elements:**
‚Ä¢ Custom SVG symbols with animations
‚Ä¢ Particle effects for wins
‚Ä¢ Responsive design for all devices
‚Ä¢ Accessibility compliance (WCAG 2.1)

**‚ö° Performance Features:**
‚Ä¢ Web Workers for calculations
‚Ä¢ Canvas rendering for smooth animations
‚Ä¢ Memory optimization
‚Ä¢ 60fps animation guarantee

This will be a fully functional, production-ready slot game!`,
        timestamp,
        suggestions: [
          "Generate the complete code",
          "Customize the theme",
          "Add bonus features",
          "Set up testing suite",
          "Deploy to production",
          "Create documentation",
        ],
        codeExample: `// Complete Slot Machine Component - Production Ready
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { SlotMachine as SlotMachineType, SlotSpin, SlotSymbol } from '@shared/slotTypes';
import { useSlotEngine } from '@hooks/useSlotEngine';
import { useAnimation } from '@hooks/useAnimation';
import { useSoundEffects } from '@hooks/useSoundEffects';

interface CoinKrazySlotProps {
  slotConfig: SlotMachineType;
  userBalance: number;
  onBalanceUpdate: (newBalance: number) => void;
  onWin: (amount: number) => void;
  theme?: 'default' | 'neon' | 'royal' | 'cyberpunk';
}

export const CoinKrazySlot: React.FC<CoinKrazySlotProps> = ({
  slotConfig,
  userBalance,
  onBalanceUpdate,
  onWin,
  theme = 'default'
}) => {
  const [currentBet, setCurrentBet] = useState(slotConfig.minBet);
  const [isSpinning, setIsSpinning] = useState(false);
  const [reelResults, setReelResults] = useState<string[][]>([]);
  const [winAmount, setWinAmount] = useState(0);
  const [winLines, setWinLines] = useState<number[]>([]);
  
  const { 
    spinReels, 
    calculateWinnings, 
    getSymbolByPosition,
    currentRTP 
  } = useSlotEngine(slotConfig);
  
  const { 
    playSpinSound, 
    playWinSound, 
    playBonusSound,
    setVolume 
  } = useSoundEffects();
  
  const {
    animateReels,
    animateWinLines,
    animateSymbols,
    resetAnimations
  } = useAnimation();

  const handleSpin = useCallback(async () => {
    if (isSpinning || currentBet > userBalance) return;
    
    setIsSpinning(true);
    resetAnimations();
    playSpinSound();
    
    try {
      // Generate spin results using provably fair algorithm
      const results = await spinReels(currentBet);
      setReelResults(results.reelPositions);
      
      // Animate reels with staggered timing
      await animateReels(results.reelPositions, {
        duration: 2000,
        easing: 'cubic-bezier(0.4, 0, 0.2, 1)',
        stagger: 200
      });
      
      // Calculate winnings
      const winData = calculateWinnings(results.reelPositions, currentBet);
      setWinAmount(winData.totalWin);
      setWinLines(winData.winningLines);
      
      // Update balance
      const newBalance = userBalance - currentBet + winData.totalWin;
      onBalanceUpdate(newBalance);
      
      if (winData.totalWin > 0) {
        onWin(winData.totalWin);
        playWinSound();
        await animateWinLines(winData.winningLines);
        await animateSymbols(winData.winningSymbols);
      }
      
    } catch (error) {
      console.error('Spin error:', error);
    } finally {
      setIsSpinning(false);
    }
  }, [currentBet, userBalance, isSpinning, spinReels, calculateWinnings]);

  const themeClasses = useMemo(() => ({
    default: 'bg-gradient-to-br from-purple-900 to-blue-900',
    neon: 'bg-gradient-to-br from-cyan-900 to-purple-900',
    royal: 'bg-gradient-to-br from-amber-900 to-red-900',
    cyberpunk: 'bg-gradient-to-br from-green-900 to-black'
  }), []);

  return (
    <div className={\`w-full max-w-6xl mx-auto \${themeClasses[theme]} rounded-xl p-6 border-2 border-gold/30\`}>
      {/* Slot Machine Header */}
      <div className="text-center mb-6">
        <h1 className="text-4xl font-bold text-gold mb-2">{slotConfig.name}</h1>
        <p className="text-white/80">{slotConfig.description}</p>
        <Badge className="mt-2 bg-gold text-black font-bold">
          CoinKrazy.com ‚Ä¢ RTP: {currentRTP}%
        </Badge>
      </div>

      {/* Reels Display */}
      <div className="relative mb-6 p-8 bg-black/50 rounded-lg border-4 border-gold/50">
        <div className="grid grid-cols-5 gap-4">
          {reelResults.map((reel, reelIndex) => (
            <div key={reelIndex} className="relative">
              <div className="bg-white/10 rounded-lg p-4 border-2 border-gold/30">
                {reel.map((symbolId, symbolIndex) => {
                  const symbol = getSymbolByPosition(reelIndex, symbolIndex);
                  return (
                    <div
                      key={\`\${reelIndex}-\${symbolIndex}\`}
                      className={\`
                        w-full h-20 mb-2 last:mb-0 rounded border-2 border-white/20 
                        flex items-center justify-center text-4xl font-bold
                        transition-all duration-300 hover:scale-105
                        \${winLines.some(line => 
                          slotConfig.paylines[line]?.positions.some(pos => 
                            pos.reel === reelIndex && pos.row === symbolIndex
                          )
                        ) ? 'bg-gold/30 border-gold animate-pulse' : 'bg-white/10'}
                      \`}
                      style={{ color: symbol?.color }}
                    >
                      {symbol?.name?.[0] || '?'}
                    </div>
                  );
                })}
              </div>
            </div>
          ))}
        </div>
        
        {/* Win Amount Display */}
        {winAmount > 0 && (
          <div className="absolute inset-0 flex items-center justify-center bg-black/70 rounded-lg">
            <div className="text-center">
              <div className="text-6xl font-bold text-gold animate-bounce mb-4">
                WIN!
              </div>
              <div className="text-4xl font-bold text-white">
                \${winAmount.toFixed(2)}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Control Panel */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Betting Controls */}
        <div className="bg-white/10 rounded-lg p-4">
          <h3 className="text-lg font-bold text-gold mb-4">Betting</h3>
          <div className="space-y-4">
            <div>
              <label className="text-white/80 text-sm">Bet Amount</label>
              <Slider
                value={[currentBet]}
                onValueChange={(value) => setCurrentBet(value[0])}
                min={slotConfig.minBet}
                max={Math.min(slotConfig.maxBet, userBalance)}
                step={0.01}
                className="mt-2"
              />
              <div className="text-gold font-bold mt-1">
                \${currentBet.toFixed(2)}
              </div>
            </div>
          </div>
        </div>

        {/* Game Stats */}
        <div className="bg-white/10 rounded-lg p-4">
          <h3 className="text-lg font-bold text-gold mb-4">Game Stats</h3>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-white/80">Balance:</span>
              <span className="text-green-400 font-bold">
                \${userBalance.toFixed(2)}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-white/80">Last Win:</span>
              <span className="text-gold font-bold">
                \${winAmount.toFixed(2)}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-white/80">RTP:</span>
              <span className="text-blue-400">{currentRTP}%</span>
            </div>
          </div>
        </div>

        {/* Spin Control */}
        <div className="bg-white/10 rounded-lg p-4">
          <Button
            onClick={handleSpin}
            disabled={isSpinning || currentBet > userBalance}
            className={\`
              w-full py-8 text-2xl font-bold
              bg-gradient-to-r from-gold to-yellow-400 
              text-black hover:from-yellow-400 hover:to-gold
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-all duration-300
            \`}
          >
            {isSpinning ? (
              <div className="flex items-center">
                <div className="w-8 h-8 border-4 border-black border-t-transparent rounded-full animate-spin mr-3" />
                SPINNING...
              </div>
            ) : (
              \`SPIN \${currentBet.toFixed(2)}\`
            )}
          </Button>
          
          {currentBet > userBalance && (
            <p className="text-red-400 text-center mt-2 text-sm">
              Insufficient balance
            </p>
          )}
        </div>
      </div>

      {/* CoinKrazy Branding */}
      <div className="text-center mt-6">
        <p className="text-gold font-bold opacity-70">
          Powered by CoinKrazy.com ‚Ä¢ Fair Play Certified
        </p>
      </div>
    </div>
  );
};

export default CoinKrazySlot;`,
        nextSteps: [
          "Integrate the component into your project",
          "Configure slot machine settings",
          "Test the gameplay mechanics",
          "Deploy to production environment",
        ],
        component: {
          type: "SlotMachine",
          name: "CoinKrazySlot",
          description: "Complete production-ready slot machine component",
          dependencies: ["@shared/slotTypes", "@hooks/useSlotEngine", "@hooks/useAnimation"],
          props: ["slotConfig", "userBalance", "onBalanceUpdate", "onWin"],
        },
        tags: ["generation", "slot", "production", "component"],
        priority: "high",
      };
    }

    // Default generation response
    return {
      id: timestamp.getTime().toString(),
      type: "ai",
      message: `üöÄ **Generation Request Processed**

I'll help you generate whatever you need! Based on your request: "${userMessage}"

What specific component or system would you like me to create?`,
      timestamp,
      suggestions: [
        "Generate React component",
        "Create API endpoint",
        "Build database schema",
        "Write test suite",
        "Create documentation",
      ],
      tags: ["generation", "general"],
    };
  };

  const handleTodoRequest = async (userMessage: string): Promise<ChatMessage> => {
    const newTodo: TodoItem = {
      id: Date.now().toString(),
      title: extractTodoTitle(userMessage),
      description: userMessage,
      status: "pending",
      priority: extractPriority(userMessage),
      estimatedTime: estimateTime(userMessage),
      assignedBy: "ai",
      dependencies: [],
      tags: extractTags(userMessage),
      created: new Date(),
      updated: new Date(),
    };

    setTodos((prev) => [...prev, newTodo]);
    
    if (onTodoCreate) {
      onTodoCreate(newTodo);
    }

    return {
      id: Date.now().toString(),
      type: "ai",
      message: `‚úÖ **Todo Created Successfully**

I've analyzed your request and created a structured todo item:

**üìã Todo Details:**
‚Ä¢ **Title:** ${newTodo.title}
‚Ä¢ **Priority:** ${newTodo.priority.toUpperCase()}
‚Ä¢ **Estimated Time:** ${newTodo.estimatedTime} hours
‚Ä¢ **Tags:** ${newTodo.tags.join(", ")}

The todo has been added to your project management system. I can break this down into smaller subtasks if needed.`,
      timestamp: new Date(),
      suggestions: [
        "Break down into subtasks",
        "Set deadline",
        "Assign dependencies",
        "Start working on this",
        "Create related todos",
      ],
      nextSteps: [
        "Review the todo details",
        "Adjust priority if needed",
        "Begin implementation",
      ],
      tags: ["todo", "management"],
    };
  };

  const handleRestoreRequest = async (userMessage: string): Promise<ChatMessage> => {
    return {
      id: Date.now().toString(),
      type: "ai",
      message: `üíæ **Restore Point Management**

I manage automatic restore points to protect your work. Here's what I can do:

**üîÑ Available Actions:**
‚Ä¢ **Create Restore Point** - Save current state
‚Ä¢ **List Restore Points** - View all saved states  
‚Ä¢ **Restore from Point** - Revert to previous state
‚Ä¢ **Auto-Backup** - Automatic saves every 30 minutes

**üìä Current Status:**
‚Ä¢ Active restore points: ${restorePoints.length}
‚Ä¢ Last backup: ${restorePoints.length > 0 ? restorePoints[restorePoints.length - 1].timestamp.toLocaleString() : 'Never'}
‚Ä¢ Auto-backup: ${aiSettings.autoCreateBackups ? 'Enabled' : 'Disabled'}

Would you like me to create a restore point now or restore from a previous state?`,
      timestamp: new Date(),
      suggestions: [
        "Create restore point now",
        "View all restore points",
        "Restore from backup",
        "Configure auto-backup",
        "Export backup data",
      ],
      nextSteps: [
        "Choose restoration action",
        "Confirm backup settings",
        "Test restore functionality",
      ],
      tags: ["restore", "backup", "management"],
    };
  };

  const handleComponentRequest = async (userMessage: string): Promise<ChatMessage> => {
    const componentType = extractComponentType(userMessage);
    
    return {
      id: Date.now().toString(),
      type: "ai",
      message: `üß© **Component Generation Ready**

I'll create a production-ready ${componentType} component for you.

**üéØ Component Features:**
‚Ä¢ **TypeScript** - Full type safety
‚Ä¢ **Responsive Design** - Mobile-first approach
‚Ä¢ **Accessibility** - WCAG 2.1 compliant
‚Ä¢ **Testing** - Jest + Testing Library
‚Ä¢ **Documentation** - JSDoc comments
‚Ä¢ **Performance** - Optimized rendering

**üé® CoinKrazy Styling:**
‚Ä¢ Brand colors and fonts
‚Ä¢ Consistent spacing and layouts
‚Ä¢ Interactive animations
‚Ä¢ Dark theme support

Ready to generate the component code?`,
      timestamp: new Date(),
      suggestions: [
        "Generate component now",
        "Customize styling",
        "Add props interface",
        "Include test suite",
        "Create Storybook story",
      ],
      component: {
        type: componentType,
        name: `CoinKrazy${componentType}`,
        description: `Production-ready ${componentType} component`,
      },
      tags: ["component", "generation", "typescript"],
    };
  };

  const handleOptimizationRequest = async (userMessage: string): Promise<ChatMessage> => {
    return {
      id: Date.now().toString(),
      type: "ai",
      message: `‚ö° **Performance Optimization Analysis**

I've analyzed your project for optimization opportunities:

**üöÄ Performance Improvements:**
‚Ä¢ **Bundle Size** - Reduce by 30% with tree shaking
‚Ä¢ **Render Performance** - Implement React.memo and useMemo
‚Ä¢ **API Calls** - Add request caching and deduplication
‚Ä¢ **Images** - Convert to WebP format, lazy loading
‚Ä¢ **JavaScript** - Code splitting and dynamic imports

**üéØ Specific Recommendations:**
‚Ä¢ Move slot calculations to Web Workers
‚Ä¢ Implement virtual scrolling for game lists
‚Ä¢ Use Canvas for smooth animations
‚Ä¢ Optimize slot symbol rendering
‚Ä¢ Cache slot configurations

**üìä Expected Results:**
‚Ä¢ 40% faster initial load time
‚Ä¢ 60% better animation performance  
‚Ä¢ 50% reduced memory usage
‚Ä¢ 90% improvement in mobile performance

Shall I implement these optimizations?`,
      timestamp: new Date(),
      suggestions: [
        "Implement all optimizations",
        "Start with bundle optimization",
        "Focus on render performance",
        "Optimize slot animations",
        "Add performance monitoring",
      ],
      codeExample: `// Performance Optimization Example
import { memo, useMemo, useCallback } from 'react';
import { useVirtualizer } from '@tanstack/react-virtual';

export const OptimizedSlotGrid = memo(({ slots, onSlotSelect }) => {
  const parentRef = useRef();
  
  const virtualizer = useVirtualizer({
    count: slots.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 200,
    overscan: 5,
  });

  const handleSlotClick = useCallback((slot) => {
    onSlotSelect(slot);
  }, [onSlotSelect]);

  const virtualItems = useMemo(() => 
    virtualizer.getVirtualItems(),
    [virtualizer]
  );

  return (
    <div ref={parentRef} className="h-96 overflow-auto">
      <div
        style={{
          height: \`\${virtualizer.getTotalSize()}px\`,
          width: '100%',
          position: 'relative',
        }}
      >
        {virtualItems.map((virtualItem) => (
          <div
            key={virtualItem.key}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: \`\${virtualItem.size}px\`,
              transform: \`translateY(\${virtualItem.start}px)\`,
            }}
          >
            <SlotCard 
              slot={slots[virtualItem.index]}
              onClick={handleSlotClick}
            />
          </div>
        ))}
      </div>
    </div>
  );
});`,
      nextSteps: [
        "Run performance audit",
        "Implement optimizations",
        "Measure improvements",
        "Monitor production performance",
      ],
      tags: ["optimization", "performance", "analysis"],
      priority: "high",
    };
  };

  const handleGeneralRequest = async (userMessage: string): Promise<ChatMessage> => {
    return {
      id: Date.now().toString(),
      type: "ai",
      message: `ü§ñ **Processing Your Request**

I understand you're asking about: "${userMessage}"

Based on my analysis using ${aiSettings.llmModel}, I can help with:

**üéØ Available Assistance:**
‚Ä¢ **Code Generation** - Complete components and systems
‚Ä¢ **Architecture Design** - Scalable system design
‚Ä¢ **Problem Solving** - Debug and optimize existing code
‚Ä¢ **Best Practices** - Industry-standard implementations
‚Ä¢ **Documentation** - Comprehensive project docs
ÔøΩÔøΩÔøΩ **Testing** - Automated test suites

**üöÄ Next Steps:**
Could you provide more specific details about what you'd like to accomplish? The more context you give me, the better I can assist you.`,
      timestamp: new Date(),
      suggestions: [
        "Generate code",
        "Design architecture",
        "Debug problem",
        "Optimize performance",
        "Create documentation",
        "Set up testing",
      ],
      nextSteps: [
        "Clarify your specific needs",
        "Provide additional context",
        "Choose development approach",
      ],
      tags: ["general", "assistance"],
    };
  };

  const createRestorePoint = (name: string, description: string, autoGenerated: boolean = false) => {
    const restorePoint: RestorePoint = {
      id: Date.now().toString(),
      name,
      description,
      timestamp: new Date(),
      data: {
        messages: messages.slice(),
        todos: todos.slice(),
        settings: { ...aiSettings },
        project: currentProject,
      },
      autoGenerated,
      tags: autoGenerated ? ["auto"] : ["manual"],
    };

    setRestorePoints((prev) => [...prev, restorePoint]);
    
    if (onRestorePoint) {
      onRestorePoint(restorePoint);
    }
  };

  const restoreFromPoint = (pointId: string) => {
    const point = restorePoints.find((p) => p.id === pointId);
    if (!point) return;

    setMessages(point.data.messages || []);
    setTodos(point.data.todos || []);
    setAiSettings(point.data.settings || aiSettings);
    
    // Add system message about restoration
    const restoreMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "system",
      message: `üîÑ **Restored from "${point.name}"**\n\nState restored from ${point.timestamp.toLocaleString()}`,
      timestamp: new Date(),
      tags: ["restore", "system"],
    };

    setMessages((prev) => [...prev, restoreMessage]);
  };

  // Utility functions
  const extractTodoTitle = (message: string): string => {
    const titleMatch = message.match(/(?:create|add|make)\s+(?:a\s+)?(?:todo\s+)?(?:for\s+)?(.+)/i);
    return titleMatch ? titleMatch[1].trim() : message.slice(0, 50) + "...";
  };

  const extractPriority = (message: string): "low" | "medium" | "high" => {
    if (message.toLowerCase().includes("urgent") || message.toLowerCase().includes("critical")) return "high";
    if (message.toLowerCase().includes("important")) return "medium";
    return "low";
  };

  const estimateTime = (message: string): number => {
    const complexity = message.toLowerCase();
    if (complexity.includes("simple") || complexity.includes("quick")) return 1;
    if (complexity.includes("complex") || complexity.includes("advanced")) return 8;
    return 4; // Default
  };

  const extractTags = (message: string): string[] => {
    const tags = [];
    if (message.toLowerCase().includes("slot")) tags.push("slot");
    if (message.toLowerCase().includes("component")) tags.push("component");
    if (message.toLowerCase().includes("api")) tags.push("api");
    if (message.toLowerCase().includes("test")) tags.push("testing");
    if (message.toLowerCase().includes("fix") || message.toLowerCase().includes("bug")) tags.push("bug");
    return tags.length > 0 ? tags : ["general"];
  };

  const extractComponentType = (message: string): string => {
    const types = ["button", "modal", "form", "card", "table", "chart", "game"];
    for (const type of types) {
      if (message.toLowerCase().includes(type)) return type;
    }
    return "component";
  };

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "user",
      message: input.trim(),
      timestamp: new Date(),
      tags: ["user-input"],
    };

    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsTyping(true);

    try {
      const aiResponse = await generateEnhancedAIResponse(userMessage.message);
      setMessages((prev) => [...prev, aiResponse]);
    } catch (error) {
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: "ai",
        message: "Sorry, I encountered an error processing your request. Please try again!",
        timestamp: new Date(),
        suggestions: ["Try rephrasing", "Check connection", "Restart conversation"],
        tags: ["error"],
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const applySuggestion = (suggestion: string) => {
    if (onSuggestionApply) {
      onSuggestionApply(suggestion);
    }
    setInput(suggestion);
  };

  const copyCode = (code: string, type: string = "code") => {
    navigator.clipboard.writeText(code);
    if (onCodeGenerate) {
      onCodeGenerate(code, type);
    }
  };

  const renderChatTab = () => (
    <div className="flex flex-col h-80">
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
            >
              <div className={`max-w-[80%] ${message.type === "user" ? "order-2" : "order-1"}`}>
                {message.type === "ai" && (
                  <div className="flex items-center mb-2">
                    <Bot className="h-4 w-4 text-gold mr-2" />
                    <span className="text-xs text-muted-foreground">
                      JoseyAI Enhanced
                    </span>
                    {message.metadata?.model && (
                      <Badge variant="outline" className="ml-2 text-xs">
                        {message.metadata.model}
                      </Badge>
                    )}
                  </div>
                )}

                <div
                  className={`p-3 rounded-lg ${
                    message.type === "user"
                      ? "bg-gold/20 text-gold-foreground border border-gold/30"
                      : message.type === "system"
                      ? "bg-blue-500/20 text-blue-100 border border-blue-500/30"
                      : "bg-muted/50 border border-muted"
                  }`}
                >
                  <div className="whitespace-pre-wrap text-sm markdown">
                    {message.message}
                  </div>

                  {/* Priority indicator */}
                  {message.priority && (
                    <Badge
                      variant={
                        message.priority === "high"
                          ? "destructive"
                          : message.priority === "medium"
                          ? "default"
                          : "secondary"
                      }
                      className="mt-2"
                    >
                      {message.priority} priority
                    </Badge>
                  )}

                  {/* Tags */}
                  {message.tags && message.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      {message.tags.map((tag, idx) => (
                        <Badge key={idx} variant="outline" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  )}

                  {/* Code Example */}
                  {message.codeExample && (
                    <div className="mt-3 p-3 bg-black/50 rounded border border-gray-600">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-xs text-gray-400 flex items-center">
                          <FileCode className="h-3 w-3 mr-1" />
                          Production Code
                        </span>
                        <div className="flex space-x-2">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => copyCode(message.codeExample!, "component")}
                            className="h-6 text-xs"
                          >
                            <Code className="h-3 w-3 mr-1" />
                            Use Code
                          </Button>
                          {message.component && (
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => onComponentGenerate?.(message.component)}
                              className="h-6 text-xs"
                            >
                              <Component className="h-3 w-3 mr-1" />
                              Generate
                            </Button>
                          )}
                        </div>
                      </div>
                      <pre className="text-xs text-green-400 overflow-x-auto max-h-40">
                        {message.codeExample}
                      </pre>
                    </div>
                  )}

                  {/* Component Info */}
                  {message.component && (
                    <div className="mt-3 p-3 bg-purple-500/20 rounded border border-purple-500/30">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-xs text-purple-300 flex items-center">
                          <Component className="h-3 w-3 mr-1" />
                          {message.component.type} Component
                        </span>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => onComponentGenerate?.(message.component)}
                          className="h-6 text-xs text-purple-300"
                        >
                          Generate Component
                        </Button>
                      </div>
                      <div className="text-xs text-purple-200">
                        <p><strong>Name:</strong> {message.component.name}</p>
                        <p><strong>Description:</strong> {message.component.description}</p>
                        {message.component.dependencies && (
                          <p><strong>Dependencies:</strong> {message.component.dependencies.join(", ")}</p>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Suggestions */}
                  {message.suggestions && message.suggestions.length > 0 && (
                    <div className="mt-3 space-y-2">
                      <span className="text-xs text-muted-foreground flex items-center">
                        <Lightbulb className="h-3 w-3 mr-1" />
                        Quick Actions:
                      </span>
                      <div className="flex flex-wrap gap-2">
                        {message.suggestions.map((suggestion, idx) => (
                          <Button
                            key={idx}
                            size="sm"
                            variant="outline"
                            onClick={() => applySuggestion(suggestion)}
                            className="h-7 text-xs border-gold/30 hover:bg-gold/10"
                          >
                            <Zap className="h-3 w-3 mr-1" />
                            {suggestion}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Next Steps */}
                  {message.nextSteps && message.nextSteps.length > 0 && (
                    <div className="mt-3">
                      <span className="text-xs text-muted-foreground">Next Steps:</span>
                      <ul className="text-xs mt-1 space-y-1">
                        {message.nextSteps.map((step, idx) => (
                          <li key={idx} className="flex items-center">
                            <span className="w-4 h-4 rounded-full bg-gold/20 text-gold text-xs flex items-center justify-center mr-2">
                              {idx + 1}
                            </span>
                            {step}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>

                <div className="text-xs text-muted-foreground mt-1">
                  {message.timestamp.toLocaleTimeString()}
                </div>
              </div>
            </div>
          ))}

          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-muted/50 border border-muted p-3 rounded-lg">
                <div className="flex items-center space-x-2">
                  <Bot className="h-4 w-4 text-gold animate-pulse" />
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gold rounded-full animate-bounce"></div>
                    <div
                      className="w-2 h-2 bg-gold rounded-full animate-bounce"
                      style={{ animationDelay: "0.1s" }}
                    ></div>
                    <div
                      className="w-2 h-2 bg-gold rounded-full animate-bounce"
                      style={{ animationDelay: "0.2s" }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {isProcessing && (
            <div className="flex justify-start">
              <div className="bg-blue-500/20 border border-blue-500/30 p-3 rounded-lg w-full max-w-xs">
                <div className="flex items-center space-x-2 mb-2">
                  <Cpu className="h-4 w-4 text-blue-400 animate-pulse" />
                  <span className="text-xs text-blue-300">Processing...</span>
                </div>
                <Progress value={processingProgress} className="mb-2" />
                <div className="text-xs text-blue-200">{currentTask}</div>
              </div>
            </div>
          )}
        </div>
        <div ref={messagesEndRef} />
      </ScrollArea>

      {/* Input Area */}
      <div className="border-t border-muted p-4">
        <div className="flex space-x-2">
          <Textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask JoseyAI anything... I can generate code, manage todos, create backups, and more!"
            onKeyPress={(e) => e.key === "Enter" && !e.shiftKey && (e.preventDefault(), sendMessage())}
            className="flex-1 border-gold/30 focus:border-gold resize-none"
            rows={2}
          />
          <Button
            onClick={sendMessage}
            disabled={!input.trim() || isTyping}
            className="bg-gradient-to-r from-gold to-yellow-400 text-gold-foreground hover:from-yellow-400 hover:to-gold self-end"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex items-center justify-between mt-2">
          <div className="flex items-center space-x-4 text-xs text-muted-foreground">
            <span className="flex items-center">
              <MessageCircle className="h-3 w-3 mr-1" />
              {messages.length - 1} messages
            </span>
            <span className="flex items-center">
              <Brain className="h-3 w-3 mr-1" />
              {aiSettings.llmModel}
            </span>
            <span className="flex items-center">
              <Settings className="h-3 w-3 mr-1" />
              {context} mode
            </span>
          </div>
          <div className="flex space-x-2">
            <Button
              size="sm"
              variant="ghost"
              onClick={() => createRestorePoint("Manual Backup", "User-created restore point")}
              className="text-xs"
            >
              <Save className="h-3 w-3 mr-1" />
              Save
            </Button>
            <Button
              size="sm"
              variant="ghost"
              onClick={() => setMessages([getEnhancedWelcomeMessage()])}
              className="text-xs"
            >
              Reset
            </Button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderTodosTab = () => (
    <div className="p-4 h-80 overflow-auto">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-bold text-gold">AI Todo Management</h3>
        <Button
          size="sm"
          onClick={() => setInput("Create a todo for ")}
          className="bg-gold/20 text-gold"
        >
          <ListTodo className="h-4 w-4 mr-1" />
          New Todo
        </Button>
      </div>

      <div className="space-y-3">
        {todos.map((todo) => (
          <div
            key={todo.id}
            className={`p-3 rounded-lg border ${
              todo.status === "completed"
                ? "bg-green-500/20 border-green-500/30"
                : todo.status === "in_progress"
                ? "bg-blue-500/20 border-blue-500/30"
                : todo.status === "blocked"
                ? "bg-red-500/20 border-red-500/30"
                : "bg-muted/50 border-muted"
            }`}
          >
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-1">
                  <h4 className="font-semibold text-sm">{todo.title}</h4>
                  <Badge
                    variant={
                      todo.priority === "high"
                        ? "destructive"
                        : todo.priority === "medium"
                        ? "default"
                        : "secondary"
                    }
                    className="text-xs"
                  >
                    {todo.priority}
                  </Badge>
                  <Badge
                    variant="outline"
                    className={`text-xs ${
                      todo.status === "completed"
                        ? "border-green-400 text-green-400"
                        : todo.status === "in_progress"
                        ? "border-blue-400 text-blue-400"
                        : "border-gray-400 text-gray-400"
                    }`}
                  >
                    {todo.status.replace("_", " ")}
                  </Badge>
                </div>
                <p className="text-xs text-muted-foreground mb-2">
                  {todo.description}
                </p>
                <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                  <span className="flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    {todo.estimatedTime}h
                  </span>
                  <span>by {todo.assignedBy}</span>
                  <span>{todo.created.toLocaleDateString()}</span>
                </div>
                {todo.tags.length > 0 && (
                  <div className="flex flex-wrap gap-1 mt-2">
                    {todo.tags.map((tag, idx) => (
                      <Badge key={idx} variant="outline" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
              <div className="flex space-x-1">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => {
                    setTodos((prev) =>
                      prev.map((t) =>
                        t.id === todo.id
                          ? {
                              ...t,
                              status:
                                t.status === "completed" ? "pending" : "completed",
                              updated: new Date(),
                            }
                          : t
                      )
                    );
                  }}
                  className="h-6 w-6 p-0"
                >
                  <CheckSquare className="h-3 w-3" />
                </Button>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => {
                    setTodos((prev) => prev.filter((t) => t.id !== todo.id));
                  }}
                  className="h-6 w-6 p-0 text-red-400"
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </div>
        ))}

        {todos.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            <ListTodo className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p>No todos yet. Ask me to create some tasks for you!</p>
          </div>
        )}
      </div>
    </div>
  );

  const renderRestoreTab = () => (
    <div className="p-4 h-80 overflow-auto">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-bold text-gold">Restore Points</h3>
        <Button
          size="sm"
          onClick={() => createRestorePoint("Manual Backup", "User-created restore point")}
          className="bg-gold/20 text-gold"
        >
          <Save className="h-4 w-4 mr-1" />
          Create Point
        </Button>
      </div>

      <div className="space-y-3">
        {restorePoints.map((point) => (
          <div
            key={point.id}
            className="p-3 rounded-lg border bg-muted/50 border-muted"
          >
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-1">
                  <h4 className="font-semibold text-sm">{point.name}</h4>
                  {point.autoGenerated && (
                    <Badge variant="outline" className="text-xs">
                      Auto
                    </Badge>
                  )}
                </div>
                <p className="text-xs text-muted-foreground mb-2">
                  {point.description}
                </p>
                <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                  <span className="flex items-center">
                    <History className="h-3 w-3 mr-1" />
                    {point.timestamp.toLocaleString()}
                  </span>
                </div>
                {point.tags.length > 0 && (
                  <div className="flex flex-wrap gap-1 mt-2">
                    {point.tags.map((tag, idx) => (
                      <Badge key={idx} variant="outline" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
              <div className="flex space-x-1">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => restoreFromPoint(point.id)}
                  className="h-6 text-xs text-blue-400"
                >
                  <RotateCcw className="h-3 w-3 mr-1" />
                  Restore
                </Button>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => {
                    navigator.clipboard.writeText(JSON.stringify(point.data, null, 2));
                  }}
                  className="h-6 text-xs"
                >
                  <Download className="h-3 w-3" />
                </Button>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => {
                    setRestorePoints((prev) => prev.filter((p) => p.id !== point.id));
                  }}
                  className="h-6 text-xs text-red-400"
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </div>
        ))}

        {restorePoints.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            <History className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p>No restore points yet. I'll create them automatically as you work!</p>
          </div>
        )}
      </div>
    </div>
  );

  const renderSettingsTab = () => (
    <div className="p-4 h-80 overflow-auto">
      <h3 className="text-lg font-bold text-gold mb-4">AI Settings</h3>
      
      <div className="space-y-4">
        <div>
          <label className="text-sm font-medium mb-2 block">LLM Model</label>
          <Select
            value={aiSettings.llmModel}
            onValueChange={(value: any) =>
              setAiSettings((prev) => ({ ...prev, llmModel: value }))
            }
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="gpt-4">GPT-4 (Recommended)</SelectItem>
              <SelectItem value="claude-3">Claude-3 Sonnet</SelectItem>
              <SelectItem value="gemini-pro">Gemini Pro</SelectItem>
              <SelectItem value="local">Local Model</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div>
          <label className="text-sm font-medium mb-2 block">
            Temperature: {aiSettings.temperature}
          </label>
          <input
            type="range"
            min="0"
            max="1"
            step="0.1"
            value={aiSettings.temperature}
            onChange={(e) =>
              setAiSettings((prev) => ({
                ...prev,
                temperature: parseFloat(e.target.value),
              }))
            }
            className="w-full"
          />
          <div className="text-xs text-muted-foreground mt-1">
            Lower = more focused, Higher = more creative
          </div>
        </div>

        <div>
          <label className="text-sm font-medium mb-2 block">
            Max Tokens: {aiSettings.maxTokens}
          </label>
          <input
            type="range"
            min="1000"
            max="8000"
            step="500"
            value={aiSettings.maxTokens}
            onChange={(e) =>
              setAiSettings((prev) => ({
                ...prev,
                maxTokens: parseInt(e.target.value),
              }))
            }
            className="w-full"
          />
        </div>

        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Code Generation</label>
            <Switch
              checked={aiSettings.enableCodeGen}
              onCheckedChange={(checked) =>
                setAiSettings((prev) => ({ ...prev, enableCodeGen: checked }))
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Todo Management</label>
            <Switch
              checked={aiSettings.enableTodoManagement}
              onCheckedChange={(checked) =>
                setAiSettings((prev) => ({ ...prev, enableTodoManagement: checked }))
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Auto Restore Points</label>
            <Switch
              checked={aiSettings.autoCreateBackups}
              onCheckedChange={(checked) =>
                setAiSettings((prev) => ({ ...prev, autoCreateBackups: checked }))
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Verbose Mode</label>
            <Switch
              checked={aiSettings.verboseMode}
              onCheckedChange={(checked) =>
                setAiSettings((prev) => ({ ...prev, verboseMode: checked }))
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Real-time Analysis</label>
            <Switch
              checked={aiSettings.realTimeAnalysis}
              onCheckedChange={(checked) =>
                setAiSettings((prev) => ({ ...prev, realTimeAnalysis: checked }))
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Voice Enabled</label>
            <Switch
              checked={aiSettings.voiceEnabled}
              onCheckedChange={(checked) =>
                setAiSettings((prev) => ({ ...prev, voiceEnabled: checked }))
              }
            />
          </div>
        </div>
      </div>
    </div>
  );

  const renderAnalyticsTab = () => (
    <div className="p-4 h-80 overflow-auto">
      <h3 className="text-lg font-bold text-gold mb-4">AI Analytics</h3>
      
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="bg-muted/50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-gold">{messages.length}</div>
          <div className="text-xs text-muted-foreground">Messages</div>
        </div>
        <div className="bg-muted/50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-blue-400">{todos.length}</div>
          <div className="text-xs text-muted-foreground">Todos</div>
        </div>
        <div className="bg-muted/50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-green-400">{restorePoints.length}</div>
          <div className="text-xs text-muted-foreground">Backups</div>
        </div>
        <div className="bg-muted/50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-purple-400">
            {messages.filter(m => m.codeExample).length}
          </div>
          <div className="text-xs text-muted-foreground">Code Generated</div>
        </div>
      </div>

      <div className="space-y-4">
        <div>
          <div className="flex justify-between text-sm mb-2">
            <span>Todos Completed</span>
            <span>{todos.filter(t => t.status === "completed").length}/{todos.length}</span>
          </div>
          <Progress 
            value={todos.length > 0 ? (todos.filter(t => t.status === "completed").length / todos.length) * 100 : 0} 
          />
        </div>

        <div>
          <div className="flex justify-between text-sm mb-2">
            <span>AI Response Rate</span>
            <span>98.5%</span>
          </div>
          <Progress value={98.5} />
        </div>

        <div>
          <div className="flex justify-between text-sm mb-2">
            <span>Code Quality Score</span>
            <span>95/100</span>
          </div>
          <Progress value={95} />
        </div>
      </div>

      <div className="mt-6">
        <h4 className="font-semibold mb-2">Recent Activity</h4>
        <div className="space-y-2 text-xs">
          {messages.slice(-5).map((msg, idx) => (
            <div key={idx} className="flex items-center space-x-2 text-muted-foreground">
              <Clock className="h-3 w-3" />
              <span>{msg.timestamp.toLocaleTimeString()}</span>
              <span>-</span>
              <span>{msg.type === "user" ? "User query" : "AI response"}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  return (
    <Card
      className={`transition-all duration-300 ${
        isExpanded ? "h-auto min-h-96" : "h-16"
      } border-gold/30 bg-gradient-to-br from-purple-900/20 to-blue-900/20`}
    >
      <CardHeader
        className="cursor-pointer bg-gradient-to-r from-gold/10 to-purple/10 border-b border-gold/20"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Avatar className="h-10 w-10 border-2 border-gold/50">
              <AvatarImage src="/joseyai-avatar.png" />
              <AvatarFallback className="bg-gradient-to-br from-gold to-purple text-white font-bold">
                <Bot className="h-5 w-5" />
              </AvatarFallback>
            </Avatar>
            <div>
              <CardTitle className="text-lg flex items-center">
                JoseyAI Enhanced
                <Sparkles className="h-4 w-4 ml-2 text-gold animate-pulse" />
                <Badge variant="outline" className="ml-2 border-gold/50 text-gold text-xs">
                  {aiSettings.llmModel}
                </Badge>
              </CardTitle>
              <CardDescription className="text-sm">
                Advanced AI Development Assistant
              </CardDescription>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="outline" className="border-gold/50 text-gold">
              <Brain className="h-3 w-3 mr-1" />
              {context}
            </Badge>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowAdvanced(!showAdvanced)}
            >
              <Settings className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="sm">
              {isExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
            </Button>
          </div>
        </div>

        {showAdvanced && isExpanded && (
          <div className="mt-4 flex space-x-4 text-xs text-muted-foreground">
            <span>Model: {aiSettings.llmModel}</span>
            <span>Temp: {aiSettings.temperature}</span>
            <span>Tokens: {aiSettings.maxTokens}</span>
            <span>Messages: {messages.length}</span>
            <span>Todos: {todos.length}</span>
            <span>Backups: {restorePoints.length}</span>
          </div>
        )}
      </CardHeader>

      {isExpanded && (
        <CardContent className="p-0">
          {/* Tab Navigation */}
          <div className="border-b border-muted">
            <div className="flex space-x-1 p-2">
              {[
                { id: "chat", label: "Chat", icon: MessageCircle },
                { id: "todos", label: "Todos", icon: ListTodo },
                { id: "restore", label: "Restore", icon: History },
                { id: "settings", label: "Settings", icon: Settings },
                { id: "analytics", label: "Analytics", icon: Database },
              ].map((tab) => (
                <Button
                  key={tab.id}
                  variant={activeTab === tab.id ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`text-xs ${
                    activeTab === tab.id
                      ? "bg-gold/20 text-gold"
                      : "text-muted-foreground"
                  }`}
                >
                  <tab.icon className="h-3 w-3 mr-1" />
                  {tab.label}
                </Button>
              ))}
            </div>
          </div>

          {/* Tab Content */}
          {activeTab === "chat" && renderChatTab()}
          {activeTab === "todos" && renderTodosTab()}
          {activeTab === "restore" && renderRestoreTab()}
          {activeTab === "settings" && renderSettingsTab()}
          {activeTab === "analytics" && renderAnalyticsTab()}
        </CardContent>
      )}
    </Card>
  );
}
